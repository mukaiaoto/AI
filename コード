import time
import cv2
 
def capture_and_save_photo(file_path, camera_index):
 # カメラをオープン
    cap = cv2.VideoCapture(camera_index)
 
    # カメラが正常にオープンされたか確認
    if not cap.isOpened():
        print("Error: カメラが正常にオープンされませんでした。")
        return
 
    # フレームをキャプチャ
    ret, frame = cap.read()
 
    # カメラを解放
    cap.release()
 
    # キャプチャが成功した場合、画像を保存
    if ret:
        cv2.imwrite(file_path, frame)
        print(f"写真を {file_path} に保存しました。")
    else:
        print("Error: 画像のキャプチャに失敗しました。")
 
if __name__ == "__main__":
    # キャプチャして保存するファイルのパスを指定
    file_path = 'captured_photo.jpg'
 
    # カメラのインデックスを指定 (通常は0から始まります)
    camera_index = 0
 
    # 写真を撮影して保存
    capture_and_save_photo(file_path, camera_index)
 
# 実行間隔を5分に設定
interval = 5 * 60
 
# プログラムを実行する関数を作成
while True:
  take_picture()
  time.sleep(interval)




from keras.models import load_model  # TensorFlow is required for Keras to work
from PIL import Image, ImageOps  # Install pillow instead of PIL
import numpy as np
 
# Disable scientific notation for clarity
np.set_printoptions(suppress=True)
 
# Load the model
model = load_model("keras_model.h5", compile=False)
 
# Load the labels
class_names = open("labels.txt", "r").readlines()
 
# Create the array of the right shape to feed into the keras model
# The 'length' or number of images you can put into the array is
# determined by the first position in the shape tuple, in this case 1
data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)
 
# Replace this with the path to your image
image = Image.open("captured_photo.jpg").convert("RGB")
 
# resizing the image to be at least 224x224 and then cropping from the center
size = (224, 224)
#image = ImageOps.fit(image, size, Image.Resampling.LANCZOS)
 
image = image.resize((size),resample=Image.BICUBIC)
 
# turn the image into a numpy array
image_array = np.asarray(image)
 
# Normalize the image
normalized_image_array = (image_array.astype(np.float32) / 127.5) - 1
 
# Load the image into the array
data[0] = normalized_image_array
 
# Predicts the model
prediction = model.predict(data)
index = np.argmax(prediction)
class_name = class_names[index]
confidence_score = prediction[0][index]
 
# Print prediction and confidence score
print("Class:", class_name[2:], end="")
print("Confidence Score:", confidence_score)
